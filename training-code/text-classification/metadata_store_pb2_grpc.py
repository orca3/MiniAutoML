# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import metadata_store_pb2 as metadata__store__pb2


class MetadataStoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogRunStart = channel.unary_unary(
                '/metadata_store.MetadataStoreService/LogRunStart',
                request_serializer=metadata__store__pb2.LogRunStartRequest.SerializeToString,
                response_deserializer=metadata__store__pb2.LogRunStartResponse.FromString,
                )
        self.LogEpoch = channel.unary_unary(
                '/metadata_store.MetadataStoreService/LogEpoch',
                request_serializer=metadata__store__pb2.LogEpochRequest.SerializeToString,
                response_deserializer=metadata__store__pb2.LogEpochResponse.FromString,
                )
        self.LogRunEnd = channel.unary_unary(
                '/metadata_store.MetadataStoreService/LogRunEnd',
                request_serializer=metadata__store__pb2.LogRunEndRequest.SerializeToString,
                response_deserializer=metadata__store__pb2.LogRunEndResponse.FromString,
                )
        self.GetRunStatus = channel.unary_unary(
                '/metadata_store.MetadataStoreService/GetRunStatus',
                request_serializer=metadata__store__pb2.GetRunStatusRequest.SerializeToString,
                response_deserializer=metadata__store__pb2.GetRunStatusResponse.FromString,
                )
        self.CreateArtifact = channel.unary_unary(
                '/metadata_store.MetadataStoreService/CreateArtifact',
                request_serializer=metadata__store__pb2.CreateArtifactRequest.SerializeToString,
                response_deserializer=metadata__store__pb2.CreateArtifactResponse.FromString,
                )
        self.GetArtifact = channel.unary_unary(
                '/metadata_store.MetadataStoreService/GetArtifact',
                request_serializer=metadata__store__pb2.GetArtifactRequest.SerializeToString,
                response_deserializer=metadata__store__pb2.GetArtifactResponse.FromString,
                )


class MetadataStoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LogRunStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogEpoch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogRunEnd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRunStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArtifact(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogRunStart': grpc.unary_unary_rpc_method_handler(
                    servicer.LogRunStart,
                    request_deserializer=metadata__store__pb2.LogRunStartRequest.FromString,
                    response_serializer=metadata__store__pb2.LogRunStartResponse.SerializeToString,
            ),
            'LogEpoch': grpc.unary_unary_rpc_method_handler(
                    servicer.LogEpoch,
                    request_deserializer=metadata__store__pb2.LogEpochRequest.FromString,
                    response_serializer=metadata__store__pb2.LogEpochResponse.SerializeToString,
            ),
            'LogRunEnd': grpc.unary_unary_rpc_method_handler(
                    servicer.LogRunEnd,
                    request_deserializer=metadata__store__pb2.LogRunEndRequest.FromString,
                    response_serializer=metadata__store__pb2.LogRunEndResponse.SerializeToString,
            ),
            'GetRunStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRunStatus,
                    request_deserializer=metadata__store__pb2.GetRunStatusRequest.FromString,
                    response_serializer=metadata__store__pb2.GetRunStatusResponse.SerializeToString,
            ),
            'CreateArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateArtifact,
                    request_deserializer=metadata__store__pb2.CreateArtifactRequest.FromString,
                    response_serializer=metadata__store__pb2.CreateArtifactResponse.SerializeToString,
            ),
            'GetArtifact': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArtifact,
                    request_deserializer=metadata__store__pb2.GetArtifactRequest.FromString,
                    response_serializer=metadata__store__pb2.GetArtifactResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'metadata_store.MetadataStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetadataStoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LogRunStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metadata_store.MetadataStoreService/LogRunStart',
            metadata__store__pb2.LogRunStartRequest.SerializeToString,
            metadata__store__pb2.LogRunStartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogEpoch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metadata_store.MetadataStoreService/LogEpoch',
            metadata__store__pb2.LogEpochRequest.SerializeToString,
            metadata__store__pb2.LogEpochResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogRunEnd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metadata_store.MetadataStoreService/LogRunEnd',
            metadata__store__pb2.LogRunEndRequest.SerializeToString,
            metadata__store__pb2.LogRunEndResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRunStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metadata_store.MetadataStoreService/GetRunStatus',
            metadata__store__pb2.GetRunStatusRequest.SerializeToString,
            metadata__store__pb2.GetRunStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metadata_store.MetadataStoreService/CreateArtifact',
            metadata__store__pb2.CreateArtifactRequest.SerializeToString,
            metadata__store__pb2.CreateArtifactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArtifact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/metadata_store.MetadataStoreService/GetArtifact',
            metadata__store__pb2.GetArtifactRequest.SerializeToString,
            metadata__store__pb2.GetArtifactResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
